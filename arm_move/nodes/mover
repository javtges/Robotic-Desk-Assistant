#!/usr/bin/env python
'''
Creates 3 services to move the arm to various positions (Waypoints).

No publishers or subscribers in this node.

SERVICES:
  + /px100/reset ~ Moves the arm to the home position, and spawns an Intel Realsense box into the Rviz scene in a defined location. Has an option to clear all the waypoints in the parameter server.
  + /px100/step ~ Moves the gripper to the desired xyz position, with a desired gripper state (open/closed). If movement is possible, it is executed and added to the waypoints list. Otherwise an errorcode is returned.
  + /px100/follow ~ Moves the gripper sequentially to the waypoints in the parameter server. If the repeat setting is true, it continues this loop until commanded to stop.

PARAMETERS:
  + /px100/waypoints ~ A list of waypoints [x,y,z,gripper_state]. This in the launchfile is initially loaded from a YAML file, though can be cleared with the /px100/reset service.

'''

import sys
import copy

import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from std_srvs.srv import Empty, EmptyResponse
from moveit_commander.conversions import pose_to_list
from interbotix_xs_modules.arm import InterbotixManipulatorXS
from arm_move.srv import step, follow, reset, resetResponse


class Mover:
    
    def __init__(self):
        '''
        Initilization function. Sets up the movegroup, the gripper movegroup, and the three services.
        Also, spawns the table in the scene after 5 seconds of delay.
        '''

        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node("mover", anonymous=True)
        print("made it to init node??")
        self.group_name = "interbotix_arm"
        self.gripper_name = "interbotix_gripper"

        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
        self.grip_group = moveit_commander.MoveGroupCommander(self.gripper_name)

        self.scene = moveit_commander.PlanningSceneInterface()
        self.robot = moveit_commander.RobotCommander()
        print("it made it here")
        rospy.sleep(5)
        self.__reset = rospy.Service("reset", reset, self.reset)
        self.__step = rospy.Service("step", step, self.step_cb)
        self.__follow = rospy.Service("follow", follow, self.follow)
        self.add_table()


    def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
        
        box_name = "box"
        scene = self.scene

        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            # Test if the box is in attached objects
            attached_objects = scene.get_attached_objects([box_name])
            is_attached = len(attached_objects.keys()) > 0
            # Test if the box is in the scene.
            # Note that attaching the box will remove it from known_objects
            is_known = box_name in scene.get_known_object_names()
            # Test if we are in the expected state
            if (box_is_attached == is_attached) and (box_is_known == is_known):
                return True
            # Sleep so that we give other threads time on the processor
            rospy.sleep(0.1)
            seconds = rospy.get_time()
        # If we exited the while loop without returning then we timed out
        return False

    def move_to_position(self, x, y, z, g):
        '''
        Arguments: Position coordinates x,y,z, Boolean gripper state g

        Given coordinates and gripper state, moves the EE to the location if it's able.
        This is used in the step and follow services.

        Returns: MoveItErrorCode: 1 is a success, -1 is a failure to plan path.
        '''

        xyz = [x,y,z]
        rospy.logerr([x,y,z])
        self.move_group.set_position_target(xyz)
        ecv, traj, time, err = self.move_group.plan()
        rospy.logerr(err)

        if err.val == 1:
            self.move_group.execute(traj, wait='true')
            self.move_group.go(wait='true')
            self.move_group.stop()

            if g == True:
                self.grip_group.set_named_target("Closed")

            elif g == False:
                self.grip_group.set_named_target("Open")
        
            self.grip_group.go(wait='true')
            self.grip_group.stop()

        return err.val

    def reset(self, req):
        '''
        Arguments: Box position x,y,z, Box orientation rx,ry,rz,rw, Reset waypoints boolean
        
        Takes a position and orientation of the realsense box and creates/moves the realsense box to the appropriate location
        Moves the robot to its predefined Home position
        If the reset boolean is true, all previously stored waypoints (from the yaml or otherwise), are cleared.
        
        Returns: resetResponse (Empty)
        '''

        self.add_box(req.x,req.y,req.z,req.rx,req.ry,req.rz,req.rw)
        self.move_group.set_named_target("Home")
        self.move_group.go()
        
        rospy.logerr(self.move_group.get_current_pose())

        reset_waypoints = req.reset

        if reset_waypoints == True:
            
            list_of_waypoints = rospy.get_param('/px100/waypoints')
            list_of_waypoints.clear()
            rospy.set_param('/px100/waypoints', list_of_waypoints)
        else:
            pass

        return resetResponse()

    def step_cb(self, req):
        '''
        Arguments: Gripper position x,y,z, gripper state boolean

        Moves the robot to a user-specified position, if it's possible
        If success, adds the point and gripper state to parameter server
        If gripper state is True, closes the grippers. If False, opens them.

        Returns: int MoveItErrorCode
        '''
        x = req.point.x
        y = req.point.y
        z = req.point.z

        err = self.move_to_position(x,y,z,req.gripper_pose)

        robot_state = [x,y,z,req.gripper_pose]
        rospy.logerr(err)
        if err == 1:
            # Add the waypoint to the parameter server
            list_of_waypoints = rospy.get_param('/px100/waypoints')
            list_of_waypoints.append(robot_state)
            rospy.set_param('/px100/waypoints', list_of_waypoints)
        
        return err

    def follow(self, req):
        '''
        Arguments: Boolean repeat

        Has the robot move to each waypoint, in sequence
        Has an option that determines if the cycle should be repeated or not
        If repeat is true, repeats going to waypoints until another service is called or the process is killed

        Returns: boolean repeat
        '''
        list_of_waypoints = rospy.get_param('/px100/waypoints')
        rospy.logerr(list_of_waypoints)
        repeat = req.repeat
        num_wps = len(list_of_waypoints)

        if repeat == True:
            while True:
                for wp in list_of_waypoints:
                    x = wp[0]
                    y = wp[1]
                    z = wp[2]
                    g = wp[3]
                    self.move_to_position(x,y,z,g)
                    rospy.sleep(0.5)

        if repeat == False:
            for wp in list_of_waypoints:
                    x = wp[0]
                    y = wp[1]
                    z = wp[2]
                    g = wp[3]
                    self.move_to_position(x,y,z,g)
                    rospy.sleep(0.5)

        return repeat

    def add_box(self,x,y,z,px,py,pz,pw, timeout=0):
        '''
        Arguments: Box position x,y,z, Box orientation rx,ry,rz,rw

        Spawns the box in the specified orientation/position.
        '''

        box_pose = geometry_msgs.msg.PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.orientation.w = pw
        box_pose.pose.orientation.x = px
        box_pose.pose.orientation.y = py
        box_pose.pose.orientation.z = pz

        box_pose.pose.position.z = z
        box_pose.pose.position.y = y  
        box_pose.pose.position.x = x

        
        box_name = "box"
        self.scene.add_box(box_name, box_pose, size=(0.14, 0.09, 0.05))
        return self.wait_for_state_update(box_is_known=True, timeout = timeout)

    def add_table(self, timeout=0):
        '''
        Arguments: Box position x,y,z, Box orientation rx,ry,rz,rw

        Spawns the table in the specified orientation/position.
        '''

        box_pose = geometry_msgs.msg.PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.orientation.w = 1.0
        box_pose.pose.position.z = -0.5
        box_pose.pose.position.y = 0  
        box_pose.pose.position.x = 0 
        
        
        box_name = "table"
        self.scene.add_box(box_name, box_pose, size=(1, 1, 1))
        return self.wait_for_state_update(box_is_known=True, timeout = timeout)


if __name__ == '__main__':
    ''' The main() function. '''
    Mover()
    rospy.spin()