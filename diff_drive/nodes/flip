#!/usr/bin/env python
'''
Publishes a Twist to cmd_vel at a fixed frequency, using the python package to make the turtle travel in a figure-eight trajectory.

PUBLISHERS:
  + cmd_vel (geometry_msgs/Twist) at a fixed frequency, causing the turtlebot to follow the desired open-loop trajectory.

BROADCASTERS:
  + A static transfrom /tf from world to odom.

SUBSCRIPTIONS:
  + /turtle1/pose (Pose) ~ continually publishes the pose of the turtle in XY coordinates, theta, angular and linear velocities.

SERVICES:
  + /pause ~ stops the turtle in its place, logs the time it was paused at.
  + /resume ~ resumes the turtle's movement, subtracts the time paused from the calculated time so that the turtle resumes in its current place.

PARAMETERS:
  + ~pub_freq - the frequency that Twist is published to cmd_vel
  + W - the width of the figure-eight
  + H - the height of the figure-eight
  + T - the period of the turtle's travel

'''

import rospy
# from std_srvs.srv import Empty, EmptyResponse
# import tf
# import tf2_ros
from geometry_msgs.msg import Twist, Vector3

class Flip:
    
    def __init__(self):
        self.publisher = rospy.Publisher('/diff/cmd_vel',Twist, queue_size=10)
        self.rate = rospy.Rate(100)
        while not rospy.is_shutdown():
            self.publish_for_time(3,2)
            # self.publish_for_time(-3,2)


    def publish_for_time(self, v, t):
        now = rospy.Time.now()
        length = rospy.Duration(t)
        end = now + length
        while rospy.Time.now() < end:
            self.publisher.publish(Twist(linear = Vector3(x=v, y=0.0, z=0.0), angular = Vector3(x=0.0, y=0.0, z=0.0)))
            self.rate.sleep()



if __name__ == '__main__':
    ''' The main() function. '''
    rospy.init_node('flip')
    Flip()
    rospy.spin()